#A test file to create a centralized regression neural network model using Tensorflow 
# https://www.tensorflow.org/tutorials/keras/regression
#%%
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import tensorflow as tf

from tensorflow import keras

#Created an error, might need later
#from tensorflow.keras import layers

#%%
# Make NumPy printouts easier to read.
np.set_printoptions(precision=3, suppress=True)
print('Tf-version: ' , tf.__version__)

#Get the data
url = 'http://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data'
column_names = ['MPG', 'Cylinders', 'Displacement', 'Horsepower', 'Weight',
                'Acceleration', 'Model Year', 'Origin']

raw_dataset = pd.read_csv(url, names=column_names,
                          na_values='?', comment='\t',
                          sep=' ', skipinitialspace=True)

dataset = raw_dataset.copy()
dataset.tail()
print('Column names: ' , column_names)

#%%
#Clean the data
dataset.isna().sum()
dataset = dataset.dropna()
print(dataset)
dataset['Origin'] = dataset['Origin'].map({1: 'USA', 2: 'Europe', 3: 'Japan'})
dataset = pd.get_dummies(dataset, columns=['Origin'], prefix='', prefix_sep='')
dataset.tail()
dataset['USA'].replace({True: 1, False: 2}, inplace=True)
dataset['Europe'].replace({True: 1, False: 2}, inplace=True)
dataset['Japan'].replace({True: 1, False: 2}, inplace=True)
print(dataset)

#%%
#Split the data into training and test sets
train_dataset = dataset.sample(frac=0.8, random_state=0)
test_dataset = dataset.drop(train_dataset.index)
sns.pairplot(train_dataset[['MPG', 'Cylinders', 'Displacement', 'Weight']], diag_kind='kde')
train_dataset.describe().transpose()
train_features = train_dataset.copy()
print(train_features)
test_features = test_dataset.copy()

train_labels = train_features.pop('MPG')
test_labels = test_features.pop('MPG')

#%%
#Normalization
train_dataset.describe().transpose()[['mean', 'std']]
normalizer = tf.keras.layers.Normalization(axis=-1)
normalizer.adapt(np.array(train_features))
print(normalizer.mean.numpy())

first = np.array(train_features[:1])

with np.printoptions(precision=2, suppress=True):
  print('First example:', first)
  print()
  print('Normalized:', normalizer(first).numpy())

# %%
# Regression with a deep neural network (DNN)
def build_and_compile_model(norm):
  model = keras.Sequential([
      norm,
      tf.keras.layers.Dense(64, activation='relu'),
      tf.keras.layers.Dense(64, activation='relu'),
      tf.keras.layers.Dense(1)
  ])

  model.compile(loss='mean_absolute_error',
                optimizer=tf.keras.optimizers.Adam(0.001))
  return model
# %%
# Regression using a DNN and multiple inputs
dnn_model = build_and_compile_model(normalizer)
dnn_model.summary()
# %%
history = dnn_model.fit(
    train_features,
    train_labels,
    validation_split=0.2,
    verbose=0, epochs=100)

# %%
test_results = dnn_model.evaluate(test_features, test_labels, verbose=0)
print(test_results)
# %%
# Performance of all models
# %%
#Make predictions with the dnn_model on the test set
test_predictions = dnn_model.predict(test_features).flatten()
#Save test predictions and labels to text file
with open(f"test_results_centralized.txt", "w") as f:
    for label, prediction in zip(test_labels, test_predictions):
        difference = label - prediction
        f.write(f"{difference}\n")
a = plt.axes(aspect='equal')
plt.scatter(test_labels, test_predictions)
plt.xlabel('True Values [MPG]')
plt.ylabel('Predictions [MPG]')
lims = [0, 50]
plt.xlim(lims)
plt.ylim(lims)
_ = plt.plot(lims, lims)
# %%
error = test_predictions - test_labels
plt.hist(error, bins=25)
plt.xlabel('Prediction Error [MPG]')
_ = plt.ylabel('Count')
# %%
#Save the model
dnn_model.save('dnn_model.keras')
# %%
#Reload the model
reloaded = tf.keras.models.load_model('dnn_model.keras')
test_results['reloaded'] = reloaded.evaluate(
    test_features, test_labels, verbose=0)
pd.DataFrame(test_results, index=['Mean absolute error [MPG]']).T

# %%
